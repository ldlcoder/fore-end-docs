(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{208:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("本节主要说明项目中通用的一些结构设计，具体项目可以酌情进行调整。")]),t._v(" "),s("h2",{attrs:{id:"目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("┌─ xxx  项目根目录\n│  ├─ api-mock  // mock数据目录\n│  │  ├─ index.js // mock目录入口文件\n│  │  ├─ modules // mock脚本模块目录\n│  │  ├─ api-config.js // 动态接口域名获取文件\n│  │  ├─ ...\n│  ├─ node_modules // npm包安装目录   \n│  ├─ dist  // 项目默认打包目录\n│  ├─ public  // vue-cli3脚手架html模板文件目录 \n│  │  ├─ index.html  // 模板页面\n│  │  ├─ favicon.ico  // 网站图标\n│  │  ├─ robots.txt  // 爬虫机器人\n│  ├─ src  // 项目主目录\n│  │  ├─ api // 项目接口函数定义文件目录\n│  │  ├─ common // 项目通用目录 \n│  │  │  ├─ commonData // 通用数据文件目录\n│  │  │  ├─ components // 通用组件目录\n│  │  │  ├─ mixins // 通用mixin目录\n│  │  │  ├─ template // 通用模板组件目录\n│  │  │  ├─ index.js // 通用文件入口\n│  │  ├─ components // 基础组件目录\n│  │  ├─ config // 项目配置文件目录\n│  │  ├─ layouts // layout布局文件目录\n│  │  ├─ mixins // 全局mixins目录\n│  │  ├─ plugins // 项目插件文件目录\n│  │  ├─ public // 项目共用文件目录\n│  │  │  ├─ styles // 样式文件目录\n│  │  ├─ router // 路由配置和处理文件目录\n│  │  ├─ store // vuex相关文件目录\n│  │  ├─ utils // 功能函数文件目录\n│  │  ├─ views // 项目视图文件目录\n│  │  │  ├─ xxxx // 模块目录\n│  │  │  │  ├─ xxxx // 路由组件目录\n│  │  ├─ App.vue // 根组件文件\n│  │  ├─ main.js // 项目入口文件\n│  ├─ .gitignore  // git忽略配置文件\n│  ├─ package.json // 项目包管理文件\n│  ├─ // 以下文件是vue-cli3项目相关\n│  ├─ babel.config.js // babel配置文件\n│  ├─ vue.config.js // 脚手架配置文件\n")])])]),s("h2",{attrs:{id:"主要结构说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要结构说明"}},[t._v("#")]),t._v(" 主要结构说明")]),t._v(" "),s("h3",{attrs:{id:"api-mock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-mock"}},[t._v("#")]),t._v(" api-mock")]),t._v(" "),s("p",[t._v("这个目录主要放置mock文件或脚本，配合"),s("code",[t._v("api-mock-plugin")]),t._v("插件使用，可以方便得使用json格式文件来mock接口数据。")]),t._v(" "),s("p",[t._v("然而很多接口可以返回相同得内容（比如提交接口），此外有些接口可以使用固定格式返回数据（比如分页列表接口）。如果给每一个这类接口提供一个json文件，的确不太友好。所以，使用脚本可以方便处理这些场景。当然，使用这些不是无成本得，好在投入是一次性得，而收益是永久得。")]),t._v(" "),s("p",[t._v("具体用法可参见"),s("a",{attrs:{href:"https://www.npmjs.com/package/@wxhccc/api-mock-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("api-mock-plugin"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"public-模板页面目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#public-模板页面目录"}},[t._v("#")]),t._v(" public(模板页面目录)")]),t._v(" "),s("p",[t._v("vue-cli3创建得项目主目录下得public目录用于放置项目主模板页面文件。而这个index.html则是打包后页面的模板，当需要添加cdn链接（比如iconfont的css，或者第三方api文件），需要修改这个文件。")]),t._v(" "),s("p",[t._v("另外网站图标也在这个目录下")]),t._v(" "),s("h3",{attrs:{id:"package-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package-json"}},[t._v("#")]),t._v(" package.json")]),t._v(" "),s("p",[t._v("项目主配置文件。所有的依赖包（dependencies）和开发包（devDependencies）都是通过这个文件进行管理的。注意不要把npm包安装错了位置。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("友情提示")]),t._v(" "),s("p",[t._v("常用npm安装命令\nnpm i xxxx -D/-S\ni 是 install的简写\n-D 是 --save-dev的简写，对应devDependencies\n-S 是 --save的简写，对应dependencies")])]),t._v(" "),s("p",[t._v("此外，如果需要发布npm包，"),s("code",[t._v("main")]),t._v("，"),s("code",[t._v("key")]),t._v(", "),s("code",[t._v("lib")]),t._v("等配置文件也是需要了解的。具体见npm文档。")]),t._v(" "),s("h3",{attrs:{id:"src"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src"}},[t._v("#")]),t._v(" src")]),t._v(" "),s("p",[t._v("项目主目录，项目80%内容会在这个目录下")]),t._v(" "),s("h4",{attrs:{id:"api目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api目录"}},[t._v("#")]),t._v(" api目录")]),t._v(" "),s("p",[t._v("目前的接口管理是使用的函数定义方式，这是一种比较好得实现方式。可以利用模块引入系统使接口清晰，同时可以避免不需要得接口被引入。因为配合了smartfetch这个接口封装库，在定义和使用时都极大程度得降低了复杂度。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("接口应该严格按照定义文档指定得请求方式发送请求。登录token也最好放置在请求头部")])]),t._v(" "),s("h4",{attrs:{id:"common目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#common目录"}},[t._v("#")]),t._v(" common目录")]),t._v(" "),s("p",[t._v("这个目录应该是目前项目里最复杂的模块了。所有项目无法抽取为无场景共用模块/组件的部分全都放置于此。故为了能更好得维护，此目录及子目录得使用应该严谨。")]),t._v(" "),s("h5",{attrs:{id:"components"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[t._v("#")]),t._v(" components")]),t._v(" "),s("p",[t._v("业务组件，特定项目内可复用，但跨项目无法使用得。比如tab形式得文件展示组件。严格遵循可复用组件规范。方便他人使用。")]),t._v(" "),s("h5",{attrs:{id:"templates"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#templates"}},[t._v("#")]),t._v(" templates")]),t._v(" "),s("p",[t._v("业务模板组件。组件内还有内部接口处理逻辑。通过传入少量参数可独立工作。整组件可复用，但对props的响应极弱。同时无法脱离项目使用。此类可称为模板（组件）")]),t._v(" "),s("h5",{attrs:{id:"mixins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[t._v("#")]),t._v(" mixins")]),t._v(" "),s("p",[t._v("项目中常见的功能页面的共用方法提取。主要是编辑页，详情页，列表页等。通过mixins方式引入，可以减少大量重复代码的编写。当然缺点也是很明显的，需要查看文件内容才能知道具体用法，文件内容过多（比如listPageMixin）。可以通过文件再拆分和添加说明文档来缓解。")]),t._v(" "),s("h4",{attrs:{id:"router"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[t._v("#")]),t._v(" router")]),t._v(" "),s("p",[t._v("路由模块定义目录，定义了路由组件的归属和加载方式。同时目录下的处理文件可以将权限数据结合实际路由对象整合成动态路由数组添加到应用中，可有效防止无权限地址访问。此外还会处理菜单数据并应用到系统菜单中，可实现动态菜单功能。")]),t._v(" "),s("h4",{attrs:{id:"utils"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#utils"}},[t._v("#")]),t._v(" utils")]),t._v(" "),s("p",[t._v("功能函数目录，目录下文件仅提供导出的功能函数，按照设计目录可以在任意文件引入并调用。故本目录下的函数应该尽量不要引入vuex或router目录下的内容。防止循环引用。")]),t._v(" "),s("p",[t._v("如果确实需要vuex/router内容，可以通过参数形式传入，然后在需要使用的地方传入。此外，还可以通过运行时绑定上下文来让函数获取其他信息，这种方式也可以避免循环引入。")]),t._v(" "),s("h4",{attrs:{id:"layouts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#layouts"}},[t._v("#")]),t._v(" layouts")]),t._v(" "),s("p",[t._v("框架组件目录。框架的意思是指页面的公共布局。例如后台管理界面的常见圣杯结构，或上左下结构，或者全屏页（无布局，仅提供公共功能，比如登录登出）。")])])}),[],!1,null,null,null);a.default=e.exports}}]);